name: Go
env:
  docker_username: bjornestad
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}
on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build backend
      working-directory: ./backend
      run: go build -v .

    - name: Build frontend
      working-directory: ./frontend
      run: go build -v .
      
    - name: Test frontend
      working-directory: ./frontend
      run: go test -v .
      
    - name: Upload backend
      uses: actions/upload-artifact@v4
      with: 
        name: backend
        path: ./backend
        
    - name: Upload frontend
      uses: actions/upload-artifact@v4
      with: 
        name: frontend
        path: ./frontend
        
  backend-docker-image:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
    - name: Download code
      uses: actions/download-artifact@v4
      with:
        name: backend
        path: ./backend
    - name: build docker
      run: bash backend/ci/build-docker.sh
    - name: push docker
      run: bash backend/ci/push-docker.sh
  frontend-docker-image:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
    - name: Download code
      uses: actions/download-artifact@v4
      with:
        name: frontend
        path: ./frontend
    - name: build docker
      run: bash frontend/ci/build-docker.sh
    - name: push docker
      run: bash frontend/ci/push-docker.sh
  
  test-deploy:
    runs-on: ubuntu-latest
    needs: [backend-docker-image, frontend-docker-image]
    steps:
    - uses: actions/checkout@v4
    - name: deploy from images
      run: echo "${{ secrets.KUBECONFIG_TEST }}" > kubeconfig && kubectl --kubeconfig kubeconfig apply -f ./CICD/

  test:
    runs-on: ubuntu-latest
    needs: [test-deploy]
    steps:
    - uses: actions/checkout@v4
    - name: run test
      if: bash test.sh == 0
      run: echo "::error::test failed"
  
  DEPLOY:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: deploy from images
      run: echo "${{ secrets.KUBECONFIG }}" > kubeconfig && kubectl --kubeconfig kubeconfig apply -f ./CICD/
